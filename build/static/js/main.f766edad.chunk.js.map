{"version":3,"sources":["api/index.js","components/Feature.js","components/Loading.js","components/Preview.js","components/Search.js","components/Title.js","index.js"],"names":["BASE_URL","KEY","fetchQueryResultsFromTermAndValue","term","value","a","fetch","encodeURI","split","join","response","json","data","fetchQueryResultsFromURL","url","fetchQueryResults","century","classification","queryString","fetchAllCenturies","localStorage","getItem","JSON","parse","records","setItem","stringify","fetchAllClassifications","Searchable","searchTerm","searchValue","setIsLoading","setSearchResults","className","key","href","onClick","event","preventDefault","result","console","error","Feature","featuredResult","title","dated","images","primaryimageurl","description","culture","style","technique","medium","dimensions","people","department","division","contact","creditline","id","toLowerCase","map","person","displayname","target","length","image","idsid","src","baseimageurl","alt","Loading","props","Preview","setFeaturedResult","searchResults","info","fetchPage","pageUrl","results","disabled","prev","next","record","index","Search","useState","centuryList","setCenturyList","classificationList","setClassificationList","setQueryString","setCentury","setClassification","useEffect","Promise","all","then","allCenturiesList","allClassificationsList","catch","onSubmit","htmlFor","type","placeholder","onChange","name","eachClassification","eachCentury","Title","App","isLoading","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.f766edad.chunk.js","sourcesContent":["/**\n * This file features and exports all of your calls to the API\n * \n * You need to replace YOUR_API_KEY in the string associated with KEY with your actual API key\n */\nexport const BASE_URL = 'https://api.harvardartmuseums.org';\nexport const KEY = 'apikey=565ec299-1746-41f9-ad7b-9ec99f9c4229';\n\n/**\n * This will make a call to the API for a single term and value (e.g. \"person\", and \"unknown\"), and return the result\n */\nexport async function fetchQueryResultsFromTermAndValue(term, value) {\n  try {\n    const response = await fetch(`${ BASE_URL }/object?${ KEY }&${ term }=${ encodeURI(value.split('-').join('|')) }`);\n    const data = await response.json();\n\n    return data;\n  } catch (error) {\n    throw error;\n  }\n}\n\n/**\n * This will make a call to the API for a preformed url (useful for previous and next buttons), and return the result\n */\nexport async function fetchQueryResultsFromURL(url) {\n  try {\n    const response = await fetch(url);\n    const data = await response.json();\n\n    return data;\n  } catch (error) {\n    throw error;\n  }\n}\n\n/**\n * Requires an object { century: '', classification: '', queryString: '' } to be passed in as an argument\n * \n * Then makes a call to the API, and returns the first page of results\n */\nexport async function fetchQueryResults({\n  century,\n  classification,\n  queryString,\n}) {\n  const url = `${ BASE_URL }/object?${ KEY }&classification=${ classification }&century=${ \n    century }&keyword=${ queryString }`;\n\n  try {\n    const response = await fetch(url);\n    const data = await response.json();\n\n    return data;\n  } catch (error) {\n    throw error;\n  }\n}\n\n/**\n * This returns early if there are centuries stored in localStorage, or fetches them from the API and stores them in localStorage if not\n */\nexport async function fetchAllCenturies() {\n  if (localStorage.getItem('centuries')) {\n    return JSON.parse(localStorage.getItem('centuries'));\n  }\n\n  const url = `${ BASE_URL }/century?${ KEY }&size=100&sort=temporalorder`;\n\n  try {\n    const response = await fetch(url);\n    const data = await response.json();\n    const records = data.records;\n\n    localStorage.setItem('centuries', JSON.stringify(records));\n\n    return records;\n  } catch (error) {\n    throw error;\n  }\n}\n\n/**\n * This returns early if there are classifications stored in localStorage, or fetches them from the API and stores them in localStorage if not \n */\nexport async function fetchAllClassifications() {\n  if (localStorage.getItem('classifications')) {\n    return JSON.parse(localStorage.getItem('classifications'));\n  }\n\n  const url = `${ BASE_URL }/classification?${ KEY }&size=100&sort=name`;\n\n  try {\n    const response = await fetch(url);\n    const data = await response.json();\n    const records = data.records;\n\n    localStorage.setItem('classifications', JSON.stringify(records));\n\n    return records;\n  } catch (error) {\n    throw error;\n  }\n}","import { features } from 'process';\nimport React, { Fragment } from 'react';\n\n// Don't touch this import\nimport { fetchQueryResultsFromTermAndValue } from '../api';\n\n/**\n * We need a new component called Searchable which:\n * \n * Has a template like this:\n * \n * <span className=\"content\">\n *  <a href=\"#\" onClick={async (event) => {}}>SOME SEARCH TERM</a>\n * </span>\n *\n * You'll need to read searchTerm, searchValue, setIsLoading, and setSearchResults off of the props.\n * \n * When someone clicks the anchor tag, you should:\n * \n * - preventDefault on the event\n * - call setIsLoading, set it to true\n * \n * Then start a try/catch/finally block:\n * \n * try:\n *  - await the result of fetchQueryResultsFromTermAndValue, passing in searchTerm and searchValue\n *  - send the result to setSearchResults (which will update the Preview component)\n * catch: \n *  - console.error the error\n * finally:\n *  - call setIsLoading, set it to false\n */\nconst Searchable = ({searchTerm, searchValue, setIsLoading, setSearchResults}) => {\n\n\n\n        return (\n            <Fragment>\n            <span className=\"title\">{searchTerm}</span>\n            <span key={searchValue} className=\"content\">\n            <a href=\"#\" onClick={async (event) => {\n            event.preventDefault()\n            setIsLoading(true);\n            try {\n                const result = await fetchQueryResultsFromTermAndValue(searchTerm, searchValue)\n                setSearchResults(result)\n            } catch(error) {\n                console.error(error)\n            } finally {\n                setIsLoading(false); \n            }\n        }}>{searchValue}</a>\n       </span></Fragment>\n       )\n}\n\n/**\n * We need a new component called Feature which looks like this when no featuredResult is passed in as a prop:\n * \n * <main id=\"feature\"></main>\n * \n * And like this when one is:\n * \n * <main id=\"feature\">\n *   <div className=\"object-feature\">\n *     <header>\n *       <h3>OBJECT TITLE</h3>\n *       <h4>WHEN IT IS DATED</h4>\n *     </header>\n *     <section className=\"facts\">\n *       <span className=\"title\">FACT NAME</span>\n *       <span className=\"content\">FACT VALUE</span>\n *       <span className=\"title\">NEXT FACT NAME</span>\n *       <span className=\"content\">NEXT FACT VALUE</span>\n *     </section>\n *     <section className=\"photos\">\n *       <img src=IMAGE_URL alt=SOMETHING_WORTHWHILE />\n *     </section>\n *   </div>\n * </main>\n * \n * The different facts look like this: title, dated, images, primaryimageurl, description, culture, style, \n * technique, medium, dimensions, people, department, division, contact, creditline\n * \n * The <Searchable /> ones are: culture, technique, medium (first toLowerCase it), and person.displayname (one for each PEOPLE)\n * \n * NOTE: people and images are likely to be arrays, and will need to be mapped over if they exist\n * \n * This component should be exported as default.\n */\nconst Feature = ({featuredResult, setIsLoading, setSearchResults}) => {\n\n    if(featuredResult) {\n    \n        const {title, dated, images, primaryimageurl, description, culture, style, \n            technique, medium, dimensions, people, department, division, contact, creditline} = featuredResult;\n        \n\n        return (\n            <main id=\"feature\">\n                <div className=\"object-feature\">\n                    <header>\n                      <h3>{title}</h3>\n                      <h4>{dated}</h4>\n                  </header>\n                  <section className=\"facts\">\n                      {description ? \n                        <Fragment>\n                            <span className=\"title\">Description</span>\n                            <span className=\"content\">{description}</span>\n                        </Fragment> \n                        : null}\n                      {culture ? \n                        <Searchable searchTerm=\"Culture\" searchValue={culture} setIsLoading={setIsLoading} setSearchResults={setSearchResults}/> \n                        : null}\n                      {style ? \n                        <Fragment>\n                            <span className=\"title\"> Style</span>\n                            <span className=\"content\">{style}</span>\n                        </Fragment> \n                        : null}\n                      {technique ? \n                        <Searchable searchTerm=\"Technique\" searchValue={technique} setIsLoading={setIsLoading} setSearchResults={setSearchResults}/> \n                        : null}\n                      {medium ? \n                        <Searchable searchTerm=\"Medium\" searchValue={medium.toLowerCase()} setIsLoading={setIsLoading} setSearchResults={setSearchResults}/> \n                        : null}\n                      {dimensions ? \n                        <Fragment>\n                            <span className=\"title\"> Dimensions</span>\n                            <span className=\"content\">{dimensions}</span>\n                        </Fragment> \n                        : null }\n                      {people ? \n                        people.map((person) => {\n                            return <Searchable searchTerm=\"People\" searchValue={person.displayname} setIsLoading={setIsLoading} setSearchResults={setSearchResults}/>\n                        })\n                        : null}\n                      {department ? \n                        <Fragment>\n                            <span className=\"title\"> Department</span>\n                            <span className=\"content\">{department}</span>\n                        </Fragment> \n                        : null}\n                      {division ? \n                        <Fragment>\n                            <span className=\"title\"> Division</span>\n                            <span className=\"content\">{division}</span>\n                        </Fragment> \n                        : null}\n                      {contact ? \n                        <Fragment>\n                            <span className=\"title\"> Contact</span>\n                            <a target=\"_blank\" href={\"mailto:\" + contact}><span className=\"content\">{contact}</span></a>\n                        </Fragment> \n                        : null }\n                      {creditline ? \n                        <Fragment>\n                            <span className=\"title\"> Creditline</span>\n                            <span className=\"content\">{creditline}</span>\n                        </Fragment> \n                        : null}\n                  </section>\n                  <section className=\"photos\">\n                  { images && images.length > 0 \n                  ? \n                    (images.map(image => { return <Fragment><img key={image.idsid} src={image.baseimageurl} alt={image.description ? image.description : title}/></Fragment>}))\n                    : \n                    primaryimageurl ? <Fragment><img key={images.idsid} src={primaryimageurl} alt={images.description ? images.description : title}/></Fragment>\n                    : null  \n                }\n                  </section>\n              </div>\n          </main>\n        )\n    } else {\n        return <main id=\"feature\"></main> \n    }\n\n}\n\nexport default Feature;","import React from 'react';\n\n/**\n * Create and export a component called Loading which uses this static HTML template:\n * \n * <div id=\"loading\">\n *   <h2 className=\"message\">Searching...</h2>\n * </div>\n */\n\n const Loading = (props) => {\n     return (\n        <div id=\"loading\">\n           <h2 className=\"message\">Searching...</h2>\n        </div>\n     )\n}\n\n export default Loading;","import React from 'react';\n\n/**\n * We need to import fetchQueryResultsFromURL since we will sometimes have urls in info.prev and info.next\n * which are query urls.\n */\nimport { fetchQueryResultsFromURL } from '../api';\n\nconst Preview = ({setSearchResults, setFeaturedResult, setIsLoading, searchResults:{info, records} }) => {\n\n  /**\n   * Destructure setSearchResults, setFeaturedResult, and setIsLoading from props\n   * and also destructure info and records from props.searchResults\n   * \n   * You need info, records, setSearchResults, setFeaturedResult, and setIsLoading as available constants\n   */\n\n\n  /**\n   * Don't touch this function, it's good to go.\n   * \n   * It has to be defined inside the Preview component to have access to setIsLoading, setSearchResults, etc...\n   */\n  async function fetchPage(pageUrl) {\n    setIsLoading(true);\n\n     try {\n      const results = await fetchQueryResultsFromURL(pageUrl);\n      setSearchResults(results);\n    } catch (error) {\n      console.error(error);\n    } finally {\n       setIsLoading(false);\n      }\n   }\n\n  return <aside id=\"preview\">\n    <header className=\"pagination\">\n      {/* This button should be disabled if nothing is set in info.prev, and should call fetchPage with info.prev when clicked */}\n      <button \n        disabled={info.prev ? false : true} \n        className=\"previous\"\n        onClick={(event) => {\n          event.preventDefault() \n          fetchPage(info.prev)}}>Previous</button>\n      {/* This button should be disabled if nothing is set in info.next, and should call fetchPage with info.next when clicked */}\n      <button\n        disabled={info.next ? false : true}\n        className=\"next\"\n        onClick={(event) => {\n          event.preventDefault()\n          fetchPage(info.next)}}>Next</button>\n    </header>\n    <section className=\"results\">\n      {records.map((record, index) => {\n        return (<div  \n            key={ index }\n            className=\"object-preview\"\n            onClick={(event) => {\n              event.preventDefault()\n              setFeaturedResult(record)\n              // prevent the default\n              // set the featured result to be this record, using setFeaturedResult\n            }}>\n            { \n              record.primaryimageurl ? <img src={ record.primaryimageurl } alt={ record.description } /> : \"\"\n              // if the record.primaryimageurl exists, show this: <img src={ record.primaryimageurl } alt={ record.description } />, otherwise show nothing \n            }\n            {\n              record.title ? <h3>{ record.title }</h3> : <h3>MISSING INFO</h3>\n              // if the record.title exists, add this: <h3>{ record.title }</h3>, otherwise show this: <h3>MISSING INFO</h3>\n            }\n          </div>)\n          })\n      }\n          \n      \n      {/* Here we should map over the records, and render something like this for each one:\n          <div  \n            key={ index }\n            className=\"object-preview\"\n            onClick={() => {\n              // prevent the default\n              // set the featured result to be this record, using setFeaturedResult\n            }}>\n            { \n              // if the record.primaryimageurl exists, show this: <img src={ record.primaryimageurl } alt={ record.description } />, otherwise show nothing \n            }\n            {\n              // if the record.title exists, add this: <h3>{ record.title }</h3>, otherwise show this: <h3>MISSING INFO</h3>\n            }\n          </div>\n        */}\n    </section>\n  </aside>\n}\n export default Preview;","import React, { useEffect, useState } from 'react';\n\n/**\n * Don't touch these imports!\n */\nimport { \n  fetchAllCenturies,\n  fetchAllClassifications,\n  fetchQueryResults\n} from '../api';\n\nconst Search = ({setIsLoading, setSearchResults}) => {\n  // Make sure to destructure setIsLoading and setSearchResults from the props\n\n\n  /**\n   * We are at the Search component, a child of app. This has a form, so we need to use useState for\n   * our controlled inputs:\n   * \n   * centuryList, setCenturyList (default should be an empty array, [])\n   * classificationList, setClassificationList (default should be an empty array, [])\n   * queryString, setQueryString (default should be an empty string, '')\n   * century, setCentury (default should be the string 'any')\n   * classification, setClassification (default should be the string 'any')\n   */\n\n  const [centuryList, setCenturyList] = useState([]);\n  const [classificationList, setClassificationList] = useState([]);\n  const [queryString, setQueryString] = useState('');\n  const [century, setCentury] = useState('any');\n  const [classification, setClassification] = useState('any');\n\n  /**\n   * Inside of useEffect, use Promise.all([]) with fetchAllCenturies and fetchAllClassifications\n   * \n   * In the .then() callback pass the returned lists to setCenturyList and setClassificationList\n   * \n   * Make sure to console.error on caught errors from the API methods.\n   */\n  useEffect(() => {\n     Promise.all([\n      fetchAllCenturies(),\n      fetchAllClassifications()])\n      .then(([allCenturiesList, allClassificationsList]) => {\n        setCenturyList(allCenturiesList) \n        setClassificationList(allClassificationsList)})\n      .catch(error => console.error(error))\n  }, []);\n\n  /**\n   * This is a form element, so we need to bind an onSubmit handler to it which:\n   * \n   * calls event.preventDefault()\n   * calls setIsLoading, set it to true\n   * \n   * then, in a try/catch/finally block:\n   * \n   * try to:\n   * - get the results from fetchQueryResults({ century, classification, queryString })\n   * - pass them to setSearchResults\n   * \n   * catch: error to console.error\n   * \n   * finally: call setIsLoading, set it to false\n   */\n  return <form id=\"search\" onSubmit={async (event) => {\n    // write code here\n    event.preventDefault()\n    setIsLoading(true)\n    try {\n      const results = await fetchQueryResults({ century, classification, queryString })\n      setSearchResults(results)\n    } catch(error) {\n      console.error(error)\n    } finally {\n      setIsLoading(false)\n    }\n  }}> \n    <fieldset>\n      <label htmlFor=\"keywords\">Query</label>\n      <input \n        id=\"keywords\" \n        type=\"text\" \n        placeholder=\"enter keywords...\" \n        value={queryString} \n        onChange={(event) => {setQueryString(event.target.value)}}/>\n    </fieldset>\n    <fieldset>\n      <label htmlFor=\"select-classification\">Classification <span className=\"classification-count\">({ classificationList.length })</span></label>\n      <select \n        name=\"classification\"\n        id=\"select-classification\"\n        value={classification} \n        onChange={(event) => {setClassification(event.target.value)}}>\n        <option value=\"any\">Any</option>\n        {/* map over the classificationList, return an <option /> */\n        classificationList.map((eachClassification) => {\n          return (<option key={eachClassification.id} value={eachClassification.name}>{eachClassification.name}</option>)\n        })}\n      </select>\n    </fieldset>\n    <fieldset>\n      <label htmlFor=\"select-century\">Century <span className=\"century-count\">({ centuryList.length })</span></label>\n      <select \n        name=\"century\" \n        id=\"select-century\"\n        value={century} \n        onChange={(event) => {setCentury(event.target.value)}}>\n        <option value=\"any\">Any</option>\n        {/* map over the centuryList, return an <option /> */\n        centuryList.map((eachCentury) => {\n          return (<option key={eachCentury.id} value={eachCentury.name}>{eachCentury.name}</option>)\n        })\n        }\n      </select>\n     </fieldset>\n    <button>SEARCH</button>\n  </form>\n\n}\n\nexport default Search;","import React from 'react';\n\n/**\n * Create/export a component called Title which uses this static HTML as the template:\n * \n * <div id=\"title\">\n *   <h1>\n *     The Art Collector\n *   </h1>\n *   <h5>\n *     Search the Harvard Art Museums' Private Collections\n *   </h5>\n * </div>\n */\n\nconst Title = (props) => {\n return (\n    <div id=\"title\">\n       <h1>\n         The Art Collector\n       </h1>\n       <h5>\n         Search the Harvard Art Museums' Private Collections\n       </h5>\n    </div>\n )\n}\n\nexport default Title;","import React, { useState } from 'react';\nimport ReactDOM, { render } from 'react-dom';\n\n// These imports won't work until you fix ./components/index.js\nimport {\n  Feature,\n  Loading,\n  Preview,\n  Search,\n  Title\n} from './components';\n\nconst App = () => {\n  /**\n   * We are at the App level component, which is top-most. Any state which needs to be shared between immediate children should\n   * be made here, so create state pairs using useState() for:\n   * \n   * searchResults, setSearchResults (default should be this object:  {info: {}, records: []} )\n   * featuredResult, setFeaturedResult (default should be null)\n   * isLoading, setIsLoading (default should be false)\n   */\n\n  const [searchResults, setSearchResults] = useState({info: {}, records: []});\n  const [featuredResult, setFeaturedResult] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n\n  return <div className=\"app\">\n    {/* <Title /> is static, doesn't need any props */}\n    <Title />\n    {/* <Search /> needs props for setIsLoading and setSearchResults (trigger <Loading /> on search start/end, and transfer results to preview) */}\n    <Search \n      setIsLoading={setIsLoading} \n      setSearchResults={setSearchResults} />\n    {/* <Preview /> needs props for searchResults, setIsLoading and setSearchResults (clicking prev/next buttons), and setFeaturedResult (clicking a preview) */}\n    <Preview \n      searchResults={searchResults}\n      setIsLoading={setIsLoading}\n      setSearchResults={setSearchResults}\n      setFeaturedResult={setFeaturedResult}\n    />\n\n    {/* <Feature /> needs props for featuredResult, as well as setIsLoading and setSearchResults (clicking on searchable properties) */}\n    <Feature \n            featuredResult={featuredResult}\n            setIsLoading={setIsLoading}\n            setSearchResults={setSearchResults}\n\n    />\n    {/* <Loading /> is static, but should only render when isLoading is true */}\n    { isLoading ? <Loading/> : null} {/* use a ternary and render null if isLoading is false */}\n  </div>\n}\n\n/**\n * Boostrap the <App /> component into the '#app' element in the DOM,\n * using ReactDOM.render();\n */\n\nReactDOM.render(<App />, document.getElementById('app'))"],"sourceRoot":""}